(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[1],{

/***/ "./components/TradingView/index.tsx":
/*!******************************************!*\
  !*** ./components/TradingView/index.tsx ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/react/jsx-dev-runtime */ \"./node_modules/@emotion/react/jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_themes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-themes */ \"./node_modules/next-themes/dist/index.modern.js\");\n/* harmony import */ var _charting_library__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../charting_library */ \"./components/charting_library/charting_library.esm.js\");\n/* harmony import */ var _utils_chartDataConnector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/chartDataConnector */ \"./utils/chartDataConnector.tsx\");\n/* harmony import */ var _stores_useMangoStore__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../stores/useMangoStore */ \"./stores/useMangoStore.tsx\");\n\n\nvar _jsxFileName = \"/home/tigthor/Documents/dvst-cloned/components/TradingView/index.tsx\",\n    _this = undefined,\n    _s = $RefreshSig$();\n\n\n\n // Make sure to follow step 1 of the README\n// import { useMarket } from '../../utils/markets';\n\n\n // This is a basic example of how to create a TV widget\n// You can add more feature such as storing charts in localStorage\n\n// export interface ChartContainerState {}\nvar TVChartContainer = function TVChartContainer() {\n  _s();\n\n  var selectedMarketName = Object(_stores_useMangoStore__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(function (s) {\n    return s.selectedMarket.name;\n  });\n\n  var _useTheme = Object(next_themes__WEBPACK_IMPORTED_MODULE_2__[\"useTheme\"])(),\n      theme = _useTheme.theme; // @ts-ignore\n\n\n  var defaultProps = {\n    symbol: selectedMarketName,\n    interval: '60',\n    theme: 'Dark',\n    containerId: 'tv_chart_container',\n    datafeedUrl: _utils_chartDataConnector__WEBPACK_IMPORTED_MODULE_4__[\"CHART_DATA_FEED\"],\n    libraryPath: '/charting_library/',\n    fullscreen: false,\n    autosize: true,\n    studiesOverrides: {\n      'volume.volume.color.0': theme === 'DVST' ? '#E54033' : '#CC2929',\n      'volume.volume.color.1': theme === 'DVST' ? '#AFD803' : '#5EBF4D'\n    }\n  };\n  var tvWidgetRef = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useRef\"])(null); // TODO: fetch market from store and wire up to chart\n  // const { market, marketName } = useMarket()\n\n  Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(function () {\n    var widgetOptions = {\n      symbol: selectedMarketName,\n      // BEWARE: no trailing slash is expected in feed URL\n      // tslint:disable-next-line:no-any\n      datafeed: new window.Datafeeds.UDFCompatibleDatafeed(defaultProps.datafeedUrl),\n      interval: defaultProps.interval,\n      container_id: defaultProps.containerId,\n      library_path: defaultProps.libraryPath,\n      locale: 'en',\n      disabled_features: ['use_localstorage_for_settings', 'timeframes_toolbar', // 'volume_force_overlay',\n      // 'left_toolbar',\n      'show_logo_on_all_charts', 'caption_buttons_text_if_possible', 'header_settings', 'header_chart_type', 'header_compare', 'compare_symbol', 'header_screenshot', // 'header_widget_dom_node',\n      'header_saveload', 'header_undo_redo', 'header_interval_dialog_button', 'show_interval_dialog_on_key_press', 'header_symbol_search' // 'header_resolutions',\n      // 'header_widget',\n      ],\n      load_last_chart: true,\n      client_id: defaultProps.clientId,\n      user_id: defaultProps.userId,\n      fullscreen: defaultProps.fullscreen,\n      autosize: defaultProps.autosize,\n      studies_overrides: defaultProps.studiesOverrides,\n      theme: theme === 'Light' ? 'Light' : 'Dark',\n      custom_css_url: '/tradingview-chart.css',\n      loading_screen: {\n        backgroundColor: 'rgba(0,0,0,0.1)'\n      },\n      overrides: {\n        'paneProperties.background': theme === 'Dark' ? '#2B2B2B' : theme === 'Light' ? '#fff' : '#1D1832',\n        'mainSeriesProperties.candleStyle.upColor': theme === 'DVST' ? '#AFD803' : '#5EBF4D',\n        'mainSeriesProperties.candleStyle.downColor': theme === 'DVST' ? '#E54033' : '#CC2929',\n        'mainSeriesProperties.candleStyle.drawWick': true,\n        'mainSeriesProperties.candleStyle.drawBorder': true,\n        'mainSeriesProperties.candleStyle.borderColor': theme === 'DVST' ? '#AFD803' : '#5EBF4D',\n        'mainSeriesProperties.candleStyle.borderUpColor': theme === 'DVST' ? '#AFD803' : '#5EBF4D',\n        'mainSeriesProperties.candleStyle.borderDownColor': theme === 'DVST' ? '#E54033' : '#CC2929',\n        'mainSeriesProperties.candleStyle.wickUpColor': theme === 'DVST' ? '#AFD803' : '#5EBF4D',\n        'mainSeriesProperties.candleStyle.wickDownColor': theme === 'DVST' ? '#E54033' : '#CC2929'\n      }\n    };\n    var tvWidget = new _charting_library__WEBPACK_IMPORTED_MODULE_3__[\"widget\"](widgetOptions);\n    tvWidgetRef.current = tvWidget;\n    tvWidget.onChartReady(function () {// tvWidget.headerReady().then(() => {\n      // const button = tvWidget.createButton()\n      // button.setAttribute('title', 'Click to show a notification popup')\n      // button.classList.add('apply-common-tooltip')\n      // button.addEventListener('click', () =>\n      //   tvWidget.showNoticeDialog({\n      //     title: 'Notification',\n      //     body: 'TradingView Charting Library API works correctly',\n      //     callback: () => {\n      //       // console.log('It works!!');\n      //     },\n      //   })\n      // )\n      // button.innerHTML = 'Check API'\n      // })\n    }); //eslint-disable-next-line\n  }, [selectedMarketName, theme]); // TODO: add market back to dep array\n  // }, [market])\n\n  return Object(_emotion_react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__[\"jsxDEV\"])(\"div\", {\n    id: defaultProps.containerId,\n    className: \"tradingview-chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 10\n  }, _this);\n};\n\n_s(TVChartContainer, \"1dQSZkf3K34GtrqAvrx3Fi6quEY=\", false, function () {\n  return [_stores_useMangoStore__WEBPACK_IMPORTED_MODULE_5__[\"default\"], next_themes__WEBPACK_IMPORTED_MODULE_2__[\"useTheme\"]];\n});\n\n_c = TVChartContainer;\n/* harmony default export */ __webpack_exports__[\"default\"] = (TVChartContainer);\n\nvar _c;\n\n$RefreshReg$(_c, \"TVChartContainer\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/TradingView/index.tsx\n");

/***/ }),

/***/ "./components/charting_library/charting_library.esm.js":
/*!*************************************************************!*\
  !*** ./components/charting_library/charting_library.esm.js ***!
  \*************************************************************/
/*! exports provided: version, widget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return i; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"widget\", function() { return r; });\n/* eslint-disable no-unused-expressions */\nvar _t = function t() {\n  return (_t = Object.assign || function (t) {\n    for (var e, o = arguments, n = 1, i = arguments.length; n < i; n++) {\n      for (var r in e = o[n]) {\n        Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);\n      }\n    }\n\n    return t;\n  }).apply(this, arguments);\n};\n\nfunction e(o, n) {\n  var i = _t({}, o);\n\n  for (var r in n) {\n    'object' != typeof o[r] || null === o[r] || Array.isArray(o[r]) ? void 0 !== n[r] && (i[r] = n[r]) : i[r] = e(o[r], n[r]);\n  }\n\n  return i;\n}\n\nvar o = {\n  mobile: {\n    disabled_features: ['left_toolbar', 'header_widget', 'timeframes_toolbar', 'edit_buttons_in_legend', 'context_menus', 'control_bar', 'border_around_the_chart'],\n    enabled_features: []\n  }\n},\n    n = {\n  width: 800,\n  height: 500,\n  interval: '1D',\n  timezone: 'Etc/UTC',\n  container_id: '',\n  library_path: '',\n  locale: 'en',\n  widgetbar: {\n    details: !1,\n    watchlist: !1,\n    watchlist_settings: {\n      default_symbols: []\n    }\n  },\n  overrides: {\n    'mainSeriesProperties.showCountdown': !1\n  },\n  studies_overrides: {},\n  trading_customization: {\n    position: {},\n    order: {}\n  },\n  brokerConfig: {\n    configFlags: {}\n  },\n  fullscreen: !1,\n  autosize: !1,\n  disabled_features: [],\n  enabled_features: [],\n  debug: !1,\n  logo: {},\n  time_frames: [{\n    text: '5y',\n    resolution: '1W'\n  }, {\n    text: '1y',\n    resolution: '1W'\n  }, {\n    text: '6m',\n    resolution: '120'\n  }, {\n    text: '3m',\n    resolution: '60'\n  }, {\n    text: '1m',\n    resolution: '30'\n  }, {\n    text: '5d',\n    resolution: '5'\n  }, {\n    text: '1d',\n    resolution: '1'\n  }],\n  client_id: '0',\n  user_id: '0',\n  charts_storage_api_version: '1.0',\n  favorites: {\n    intervals: [],\n    chartTypes: []\n  }\n};\n\nfunction i() {\n  return 'CL v17.025 (internal id 2f0c4150 @ 2020-11-19T09:50:09.264Z)';\n}\n\nvar r = function () {\n  function t(t) {\n    if (this._id = 'tradingview_' + (1048576 * (1 + Math.random()) | 0).toString(16).substring(1), this._ready = !1, this._readyHandlers = [], this._onWindowResize = this._autoResizeChart.bind(this), !t.datafeed) throw new Error('Datafeed is not defined');\n\n    if (this._options = e(n, t), t.preset) {\n      var i = o[t.preset];\n      i ? (void 0 !== this._options.disabled_features ? this._options.disabled_features = this._options.disabled_features.concat(i.disabled_features) : this._options.disabled_features = i.disabled_features, void 0 !== this._options.enabled_features ? this._options.enabled_features = this._options.enabled_features.concat(i.enabled_features) : this._options.enabled_features = i.enabled_features) : console.warn('Unknown preset: `' + t.preset + '`');\n    }\n\n    'Dark' === this._options.theme && void 0 === this._options.loading_screen && (this._options.loading_screen = {\n      backgroundColor: '#131722'\n    }), this._create();\n  }\n\n  return t.prototype.onChartReady = function (t) {\n    this._ready ? t.call(this) : this._readyHandlers.push(t);\n  }, t.prototype.headerReady = function () {\n    var t = this;\n    return this._innerWindowLoaded.then(function () {\n      return t._innerWindow().headerReady();\n    });\n  }, t.prototype.onGrayedObjectClicked = function (t) {\n    this._innerAPI().onGrayedObjectClicked(t);\n  }, t.prototype.onShortcut = function (t, e) {\n    this._innerWindow().createShortcutAction(t, e);\n  }, t.prototype.subscribe = function (t, e) {\n    this._innerAPI().subscribe(t, e);\n  }, t.prototype.unsubscribe = function (t, e) {\n    this._innerAPI().unsubscribe(t, e);\n  }, t.prototype.chart = function (t) {\n    return this._innerAPI().chart(t);\n  }, t.prototype.getLanguage = function () {\n    return this._options.locale;\n  }, t.prototype.setSymbol = function (t, e, o) {\n    this._innerAPI().changeSymbol(t, e, o);\n  }, t.prototype.remove = function () {\n    window.removeEventListener('resize', this._onWindowResize), this._readyHandlers.splice(0, this._readyHandlers.length), delete window[this._id], this._iFrame.parentNode && this._iFrame.parentNode.removeChild(this._iFrame);\n  }, t.prototype.closePopupsAndDialogs = function () {\n    this._innerAPI().closePopupsAndDialogs();\n  }, t.prototype.selectLineTool = function (t) {\n    this._innerAPI().selectLineTool(t);\n  }, t.prototype.selectedLineTool = function () {\n    return this._innerAPI().selectedLineTool();\n  }, t.prototype.save = function (t) {\n    this._innerAPI().saveChart(t);\n  }, t.prototype.load = function (t, e) {\n    this._innerAPI().loadChart({\n      json: t,\n      extendedData: e\n    });\n  }, t.prototype.getSavedCharts = function (t) {\n    this._innerAPI().getSavedCharts(t);\n  }, t.prototype.loadChartFromServer = function (t) {\n    this._innerAPI().loadChartFromServer(t);\n  }, t.prototype.saveChartToServer = function (t, e, o) {\n    this._innerAPI().saveChartToServer(t, e, o);\n  }, t.prototype.removeChartFromServer = function (t, e) {\n    this._innerAPI().removeChartFromServer(t, e);\n  }, t.prototype.onContextMenu = function (t) {\n    this._innerAPI().onContextMenu(t);\n  }, t.prototype.createButton = function (t) {\n    return this._innerWindow().createButton(t);\n  }, t.prototype.showNoticeDialog = function (t) {\n    this._innerAPI().showNoticeDialog(t);\n  }, t.prototype.showConfirmDialog = function (t) {\n    this._innerAPI().showConfirmDialog(t);\n  }, t.prototype.showLoadChartDialog = function () {\n    this._innerAPI().showLoadChartDialog();\n  }, t.prototype.showSaveAsChartDialog = function () {\n    this._innerAPI().showSaveAsChartDialog();\n  }, t.prototype.symbolInterval = function () {\n    return this._innerAPI().getSymbolInterval();\n  }, t.prototype.mainSeriesPriceFormatter = function () {\n    return this._innerAPI().mainSeriesPriceFormatter();\n  }, t.prototype.getIntervals = function () {\n    return this._innerAPI().getIntervals();\n  }, t.prototype.getStudiesList = function () {\n    return this._innerAPI().getStudiesList();\n  }, t.prototype.addCustomCSSFile = function (t) {\n    this._innerWindow().addCustomCSSFile(t);\n  }, t.prototype.applyOverrides = function (t) {\n    this._options = e(this._options, {\n      overrides: t\n    }), this._innerWindow().applyOverrides(t);\n  }, t.prototype.applyStudiesOverrides = function (t) {\n    this._innerWindow().applyStudiesOverrides(t);\n  }, t.prototype.watchList = function () {\n    return this._innerAPI().watchlist();\n  }, t.prototype.activeChart = function () {\n    return this._innerAPI().activeChart();\n  }, t.prototype.chartsCount = function () {\n    return this._innerAPI().chartsCount();\n  }, t.prototype.layout = function () {\n    return this._innerAPI().layout();\n  }, t.prototype.setLayout = function (t) {\n    this._innerAPI().setLayout(t);\n  }, t.prototype.layoutName = function () {\n    return this._innerAPI().layoutName();\n  }, t.prototype.changeTheme = function (t, e) {\n    this._innerWindow().changeTheme(t, e);\n  }, t.prototype.getTheme = function () {\n    return this._innerWindow().getTheme();\n  }, t.prototype.takeScreenshot = function () {\n    this._innerAPI().takeScreenshot();\n  }, t.prototype.lockAllDrawingTools = function () {\n    return this._innerAPI().lockAllDrawingTools();\n  }, t.prototype.hideAllDrawingTools = function () {\n    return this._innerAPI().hideAllDrawingTools();\n  }, t.prototype.drawOnAllCharts = function (t) {\n    this._innerAPI().drawOnAllCharts(t);\n  }, t.prototype.magnetEnabled = function () {\n    return this._innerAPI().magnetEnabled();\n  }, t.prototype.magnetMode = function () {\n    return this._innerAPI().magnetMode();\n  }, t.prototype.undoRedoState = function () {\n    return this._innerAPI().undoRedoState();\n  }, t.prototype.setIntervalLinkingEnabled = function (t) {\n    this._innerAPI().setIntervalLinkingEnabled(t);\n  }, t.prototype.setTimeFrame = function (t) {\n    this._innerAPI().setTimeFrame(t);\n  }, t.prototype.symbolSync = function () {\n    return this._innerAPI().symbolSync();\n  }, t.prototype.intervalSync = function () {\n    return this._innerAPI().intervalSync();\n  }, t.prototype.crosshairSync = function () {\n    return this._innerAPI().crosshairSync();\n  }, t.prototype.timeSync = function () {\n    return this._innerAPI().timeSync();\n  }, t.prototype.getAllFeatures = function () {\n    return this._innerWindow().getAllFeatures();\n  }, t.prototype.takeClientScreenshot = function () {\n    return this._innerAPI().takeClientScreenshot();\n  }, t.prototype._innerAPI = function () {\n    return this._innerWindow().tradingViewApi;\n  }, t.prototype._innerWindow = function () {\n    return this._iFrame.contentWindow;\n  }, t.prototype._autoResizeChart = function () {\n    this._options.fullscreen && (this._iFrame.style.height = window.innerHeight + 'px');\n  }, t.prototype._create = function () {\n    var t = this,\n        e = this._render(),\n        o = document.getElementById(this._options.container_id);\n\n    if (null === o) throw new Error('There is no such element - #' + this._options.container_id);\n    o.innerHTML = e, this._iFrame = o.querySelector('#' + this._id);\n    var n = this._iFrame;\n    (this._options.autosize || this._options.fullscreen) && (n.style.width = '100%', this._options.fullscreen || (n.style.height = '100%')), window.addEventListener('resize', this._onWindowResize), this._onWindowResize(), this._innerWindowLoaded = new Promise(function (t) {\n      var e = function e() {\n        n.removeEventListener('load', e, !1), t();\n      };\n\n      n.addEventListener('load', e, !1);\n    }), this._innerWindowLoaded.then(function () {\n      t._innerWindow().widgetReady(function () {\n        t._ready = !0;\n\n        for (var e = 0, o = t._readyHandlers; e < o.length; e++) {\n          var n = o[e];\n\n          try {\n            n.call(t);\n          } catch (i) {\n            console.error(i);\n          }\n        }\n\n        t._innerWindow().initializationFinished();\n      });\n    });\n  }, t.prototype._render = function () {\n    var t = window;\n    if (t[this._id] = {\n      datafeed: this._options.datafeed,\n      customFormatters: this._options.custom_formatters || this._options.customFormatters,\n      brokerFactory: this._options.broker_factory || this._options.brokerFactory,\n      overrides: this._options.overrides,\n      studiesOverrides: this._options.studies_overrides,\n      tradingCustomization: this._options.trading_customization,\n      disabledFeatures: this._options.disabled_features,\n      enabledFeatures: this._options.enabled_features,\n      brokerConfig: this._options.broker_config || this._options.brokerConfig,\n      restConfig: this._options.restConfig,\n      favorites: this._options.favorites,\n      logo: this._options.logo,\n      numeric_formatting: this._options.numeric_formatting,\n      rss_news_feed: this._options.rss_news_feed,\n      newsProvider: this._options.news_provider,\n      loadLastChart: this._options.load_last_chart,\n      saveLoadAdapter: this._options.save_load_adapter,\n      loading_screen: this._options.loading_screen,\n      settingsAdapter: this._options.settings_adapter,\n      getCustomIndicators: this._options.custom_indicators_getter\n    }, this._options.saved_data) t[this._id].chartContent = {\n      json: this._options.saved_data\n    };else if (!this._options.load_last_chart && !this._options.symbol) throw new Error(\"Symbol is not defined: either 'symbol' or 'load_last_chart' option must be set\");\n    var e = (this._options.library_path || '') + (encodeURIComponent(this._options.locale) + '-tv-chart.2f0c4150.html#symbol=') + encodeURIComponent(this._options.symbol || '') + '&interval=' + encodeURIComponent(this._options.interval) + (this._options.timeframe ? '&timeframe=' + encodeURIComponent(this._options.timeframe) : '') + (this._options.toolbar_bg ? '&toolbarbg=' + encodeURIComponent(this._options.toolbar_bg.replace('#', '')) : '') + (this._options.studies_access ? '&studiesAccess=' + encodeURIComponent(JSON.stringify(this._options.studies_access)) : '') + '&widgetbar=' + encodeURIComponent(JSON.stringify(this._options.widgetbar)) + (this._options.drawings_access ? '&drawingsAccess=' + encodeURIComponent(JSON.stringify(this._options.drawings_access)) : '') + '&timeFrames=' + encodeURIComponent(JSON.stringify(this._options.time_frames)) + '&locale=' + encodeURIComponent(this._options.locale) + '&uid=' + encodeURIComponent(this._id) + '&clientId=' + encodeURIComponent(String(this._options.client_id)) + '&userId=' + encodeURIComponent(String(this._options.user_id)) + (this._options.charts_storage_url ? '&chartsStorageUrl=' + encodeURIComponent(this._options.charts_storage_url) : '') + (this._options.charts_storage_api_version ? '&chartsStorageVer=' + encodeURIComponent(this._options.charts_storage_api_version) : '') + (this._options.custom_css_url ? '&customCSS=' + encodeURIComponent(this._options.custom_css_url) : '') + (this._options.auto_save_delay ? '&autoSaveDelay=' + encodeURIComponent(String(this._options.auto_save_delay)) : '') + '&debug=' + encodeURIComponent(String(this._options.debug)) + (this._options.snapshot_url ? '&snapshotUrl=' + encodeURIComponent(this._options.snapshot_url) : '') + (this._options.timezone ? '&timezone=' + encodeURIComponent(this._options.timezone) : '') + (this._options.study_count_limit ? '&studyCountLimit=' + encodeURIComponent(String(this._options.study_count_limit)) : '') + (this._options.symbol_search_request_delay ? '&ssreqdelay=' + encodeURIComponent(String(this._options.symbol_search_request_delay)) : '') + (this._options.compare_symbols ? '&compareSymbols=' + encodeURIComponent(JSON.stringify(this._options.compare_symbols)) : '') + (this._options.theme ? '&theme=' + encodeURIComponent(String(this._options.theme)) : '');\n    return '<iframe id=\"' + this._id + '\" name=\"' + this._id + '\"  src=\"' + e + '\"' + (this._options.autosize || this._options.fullscreen ? '' : ' width=\"' + this._options.width + '\" height=\"' + this._options.height + '\"') + ' frameborder=\"0\" allowTransparency=\"true\" scrolling=\"no\" allowfullscreen style=\"display:block;\"></iframe>';\n  }, t;\n}();\n\nwindow.TradingView = window.TradingView || {}, window.TradingView.version = i;\n\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/next/dist/compiled/webpack/harmony-module.js */ \"./node_modules/next/dist/compiled/webpack/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/charting_library/charting_library.esm.js\n");

/***/ })

}]);